class Fraction:
    """ This class represents one single fraction that consists of
        numerator and denominator """

    def __init__(self, numerator, denominator):
        """
        Constructor. Checks that the numerator and denominator are of
        correct type and initializes them.

        :param numerator: fraction's numerator
        :param denominator: fraction's denominator
        """

        if not isinstance(numerator, int) or not isinstance(denominator, int):
            raise TypeError
        elif denominator == 0:
            raise ValueError

        self.__numerator = numerator
        self.__denominator = denominator

    def return_string(self):
        """ Returns a string-presentation of the fraction in the format
        numerator/denominator """

        if self.__numerator * self.__denominator < 0:
            sign = "-"
        else:
            sign = ""
        return "{:s}{:d}/{:d}".format(sign, abs(self.__numerator),
                                      abs(self.__denominator))

    def simplify(self):
        common_number = greatest_common_divisor(self.__numerator, self.__denominator)
        self.__numerator = self.__numerator // common_number
        self.__denominator = self.__denominator // common_number

    def __str__(self):
        return str(self.return_string())


def greatest_common_divisor(a, b):
    """
    Euclidean algorithm.
    """

    while b != 0:
        a, b = b, a % b
    return a


def print_frac():
    lista = []
    print("Enter fractions in the format integer/integer.")
    print("One fraction per line. Stop by entering an empty line.")

    while True:
        answer = input()

        if answer != "":
            lista.append(answer)
        else:
            break

    print("The given fractions in their simplified form:")

    for word in lista:
        word = word.split("/")
        frac = Fraction(int(word[0]), int(word[1]))
        print(frac, "=", end=" ")
        frac.simplify()
        print(frac)


def main():
    print_frac()


main()
